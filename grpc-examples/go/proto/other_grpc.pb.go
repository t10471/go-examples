// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OtherClient is the client API for Other service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OtherClient interface {
	CallOther(ctx context.Context, in *OtherRequest, opts ...grpc.CallOption) (*OtherReply, error)
	CallOtherV2(ctx context.Context, in *OtherRequest, opts ...grpc.CallOption) (*OtherReply, error)
}

type otherClient struct {
	cc grpc.ClientConnInterface
}

func NewOtherClient(cc grpc.ClientConnInterface) OtherClient {
	return &otherClient{cc}
}

func (c *otherClient) CallOther(ctx context.Context, in *OtherRequest, opts ...grpc.CallOption) (*OtherReply, error) {
	out := new(OtherReply)
	err := c.cc.Invoke(ctx, "/other.Other/CallOther", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *otherClient) CallOtherV2(ctx context.Context, in *OtherRequest, opts ...grpc.CallOption) (*OtherReply, error) {
	out := new(OtherReply)
	err := c.cc.Invoke(ctx, "/other.Other/CallOtherV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OtherServer is the server API for Other service.
// All implementations must embed UnimplementedOtherServer
// for forward compatibility
type OtherServer interface {
	CallOther(context.Context, *OtherRequest) (*OtherReply, error)
	CallOtherV2(context.Context, *OtherRequest) (*OtherReply, error)
	mustEmbedUnimplementedOtherServer()
}

// UnimplementedOtherServer must be embedded to have forward compatible implementations.
type UnimplementedOtherServer struct {
}

func (UnimplementedOtherServer) CallOther(context.Context, *OtherRequest) (*OtherReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CallOther not implemented")
}
func (UnimplementedOtherServer) CallOtherV2(context.Context, *OtherRequest) (*OtherReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CallOtherV2 not implemented")
}
func (UnimplementedOtherServer) mustEmbedUnimplementedOtherServer() {}

// UnsafeOtherServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OtherServer will
// result in compilation errors.
type UnsafeOtherServer interface {
	mustEmbedUnimplementedOtherServer()
}

func RegisterOtherServer(s grpc.ServiceRegistrar, srv OtherServer) {
	s.RegisterService(&Other_ServiceDesc, srv)
}

func _Other_CallOther_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OtherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OtherServer).CallOther(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/other.Other/CallOther",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OtherServer).CallOther(ctx, req.(*OtherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Other_CallOtherV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OtherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OtherServer).CallOtherV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/other.Other/CallOtherV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OtherServer).CallOtherV2(ctx, req.(*OtherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Other_ServiceDesc is the grpc.ServiceDesc for Other service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Other_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "other.Other",
	HandlerType: (*OtherServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CallOther",
			Handler:    _Other_CallOther_Handler,
		},
		{
			MethodName: "CallOtherV2",
			Handler:    _Other_CallOtherV2_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/other.proto",
}
